/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.cmp.view;

import app.cmp.model.Actividad;
import app.cpm.controller.Controller;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.Ellipse2D;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author leaca
 */
public class simpleView extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form simpleView
     */
    public simpleView() {
        initComponents();
        initListeners(); //metodo agregado por el profe
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(simpleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(simpleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(simpleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(simpleView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new simpleView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public Model model;
    public Controller controller;
    int r = 20; //radio del circulo 
    int d = 40; //diametro del circulo
    boolean arrastrar;
    int mouseX;
    int mouseY;
    String idActividad;
    
    public void setModel(Model r){
        this.model = r;
        model.addObserver(this); //agregamos este view a la lista de observers del model
    }
    
    public void setController(Controller c){
        this.controller = c;  
             
    }
    
    public void initListeners(){
        this.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent ev){
                if(ev.getClickCount() == 2)
                    preAgregarActividad(ev.getX(), ev.getY());
                else
                {
                    Actividad seleccionada = seleccionar(ev.getX(), ev.getY());
                    if(seleccionada != null)
                        setTitle(seleccionada.getId());
                }
            }
            
            @Override
            public void mousePressed(MouseEvent e){
            
                for(Actividad a : model.getR().getAcividades().values()){
                    if(new Rectangle(a.getX() - d/2, a.getY() - d/2, d, d).contains(e.getPoint())){
                        idActividad = a.getId();
                        arrastrar = true;
                        break;
                    }
                }
            }
            
            @Override
            public void mouseReleased(MouseEvent e){
                idActividad = "";
                arrastrar = false;
            }
        }
        );
        
        this.addMouseMotionListener(new MouseMotionAdapter(){
            @Override
            public void mouseDragged(MouseEvent e){
               if(arrastrar){
                   model.getR().getAcividades().get(idActividad).setX(e.getX());
                   model.getR().getAcividades().get(idActividad).setY(e.getY());
               }
                
               repaint(); 
            }
            
        });
                
    }
    
    public Actividad seleccionar(int x, int y){
        for(Actividad a : model.getR().getAcividades().values()){
            if( (new Ellipse2D.Double(a.getX()-r, a.getY() - r, d, d)).contains(x,y))
                return a;
        }
        return null;
    }
    
    public void preAgregarActividad(int x, int y){
        JTextField id = new JTextField();
        JTextField duracion = new JTextField();
        Object[] message = { "Id:", id, "Duracion:", duracion};
        int option = JOptionPane.showConfirmDialog(null, message, "Actividad", JOptionPane.OK_CANCEL_OPTION);
        
        
        //---- validar datos ingresados ----
        while( model.getR().getAcividades().containsKey(id.getText())|| !esEntero(duracion.getText()) || Integer.parseInt(duracion.getText()) < 0 ){
            if(model.getR().getAcividades().containsKey(id.getText())) JOptionPane.showMessageDialog(null, "La actividad ya existe", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            if(!esEntero(duracion.getText())) JOptionPane.showMessageDialog(null, "La duración debe ser un número entero", "ERROR", JOptionPane.INFORMATION_MESSAGE);//*******
            if(Integer.parseInt(duracion.getText()) < 0) JOptionPane.showMessageDialog(null, "La duración debe ser un número positivo", "ERROR", JOptionPane.INFORMATION_MESSAGE);
            
            JOptionPane.showConfirmDialog(null, message, "Actividad", JOptionPane.OK_CANCEL_OPTION);
            
            //----------------------------------
            if(option == JOptionPane.OK_OPTION){
                try{ controller.agregarActividad(id.getText(), Integer.parseInt(duracion.getText()), x, y);
                break;
                }
                catch(Exception e){ }
            }
            else
                break;
        }
    }
    
    public boolean esEntero(String numero){ //valida si el numero ingresado es un entero
        for(int i = 0; i < numero.length(); i++){ //arreglar
            if(Character.isLetter(numero.charAt(i)) || numero.charAt(i) == '.' || numero.charAt(i) == ',') //isDigit(numero.charAt(i)))
                return false;
        }
        return true;
    }
    
    public void paint(Graphics g){
        super.paint(g);
        for(Actividad a : model.getR().getAcividades().values()){
            if(a.calculoHolgura() == 0)
                g.setColor(Color.red);
            else
                g.setColor(Color.black);
            g.drawOval(a.getX()-r, a.getY()-r, d, d);
            g.drawString(a.getId()+ "(" +a.getDuracion()+")", a.getX()-r+5, a.getY()+5);
        }
    }

    @Override
    public void update(Observable o, Object arg) {
       this.repaint(); //llama al metodo paint que tenemos implementado arriba
       
    }
}
